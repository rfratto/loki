// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dataobj/internal/logstreamsmd/logstreamsmd.proto

package logstreamsmd

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ColumnType represents the valid types that a stream's column can have.
type ColumnType int32

const (
	// Invalid column type.
	COLUMN_TYPE_UNSPECIFIED ColumnType = 0
	// A column of timestamps of log lines.
	COLUMN_TYPE_TIMESTAMP ColumnType = 1
	// A column containing structured metadata values for a specific key.
	COLUMN_TYPE_METADATA ColumnType = 2
	// A column containing log lines.
	COLUMN_TYPE_LOG_LINE ColumnType = 3
)

var ColumnType_name = map[int32]string{
	0: "COLUMN_TYPE_UNSPECIFIED",
	1: "COLUMN_TYPE_TIMESTAMP",
	2: "COLUMN_TYPE_METADATA",
	3: "COLUMN_TYPE_LOG_LINE",
}

var ColumnType_value = map[string]int32{
	"COLUMN_TYPE_UNSPECIFIED": 0,
	"COLUMN_TYPE_TIMESTAMP":   1,
	"COLUMN_TYPE_METADATA":    2,
	"COLUMN_TYPE_LOG_LINE":    3,
}

func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{0}
}

// CompressionType represents the valid compression types that can be used for
// compressing a column's data page.
type CompressionType int32

const (
	// Invalid compression type.
	COMPRESSION_TYPE_UNSPECIFIED CompressionType = 0
	// No compression.
	COMPRESSION_TYPE_NONE CompressionType = 1
	// Snappy compression.
	COMPRESSION_TYPE_SNAPPY CompressionType = 2
	// Zstd compression.
	COMPRESSION_TYPE_ZSTD CompressionType = 3
)

var CompressionType_name = map[int32]string{
	0: "COMPRESSION_TYPE_UNSPECIFIED",
	1: "COMPRESSION_TYPE_NONE",
	2: "COMPRESSION_TYPE_SNAPPY",
	3: "COMPRESSION_TYPE_ZSTD",
}

var CompressionType_value = map[string]int32{
	"COMPRESSION_TYPE_UNSPECIFIED": 0,
	"COMPRESSION_TYPE_NONE":        1,
	"COMPRESSION_TYPE_SNAPPY":      2,
	"COMPRESSION_TYPE_ZSTD":        3,
}

func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{1}
}

// EncodingType holds various encoding types for data within a page.
type EncodingType int32

const (
	// Invalid encoding type.
	ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	// Plain encoding; data is stored as-is.
	ENCODING_TYPE_PLAIN EncodingType = 1
	// Delta encoding. The first value within the page is stored as-is, and
	// subsequent values are stored as the delta from the previous value.
	ENCODING_TYPE_DELTA EncodingType = 2
)

var EncodingType_name = map[int32]string{
	0: "ENCODING_TYPE_UNSPECIFIED",
	1: "ENCODING_TYPE_PLAIN",
	2: "ENCODING_TYPE_DELTA",
}

var EncodingType_value = map[string]int32{
	"ENCODING_TYPE_UNSPECIFIED": 0,
	"ENCODING_TYPE_PLAIN":       1,
	"ENCODING_TYPE_DELTA":       2,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{2}
}

// Metadata describes the metadata for the streams section.
type Metadata struct {
	// Streams within the section.
	Streams []*StreamInfo `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetStreams() []*StreamInfo {
	if m != nil {
		return m.Streams
	}
	return nil
}

// StreamInfo describes an individual log stream within the streams section.
type StreamInfo struct {
	// Label set representing the stream.
	Identifier *StreamIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Total uncompressed size of the entire stream.
	UncompressedSize uint32 `protobuf:"varint,2,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Total compressed size of the entire stream. Compressed size may match
	// uncompressed size if no compression is used.
	CompressedSize uint32 `protobuf:"varint,3,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	// Byte offset from the start of the data object to the stream's metadata.
	MetadataOffset uint32 `protobuf:"varint,4,opt,name=metadata_offset,json=metadataOffset,proto3" json:"metadata_offset,omitempty"`
	// Size of the stream's metadata in bytes.
	MetadataSize uint32 `protobuf:"varint,5,opt,name=metadata_size,json=metadataSize,proto3" json:"metadata_size,omitempty"`
}

func (m *StreamInfo) Reset()      { *m = StreamInfo{} }
func (*StreamInfo) ProtoMessage() {}
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{1}
}
func (m *StreamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamInfo.Merge(m, src)
}
func (m *StreamInfo) XXX_Size() int {
	return m.Size()
}
func (m *StreamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StreamInfo proto.InternalMessageInfo

func (m *StreamInfo) GetIdentifier() *StreamIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *StreamInfo) GetUncompressedSize() uint32 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *StreamInfo) GetCompressedSize() uint32 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *StreamInfo) GetMetadataOffset() uint32 {
	if m != nil {
		return m.MetadataOffset
	}
	return 0
}

func (m *StreamInfo) GetMetadataSize() uint32 {
	if m != nil {
		return m.MetadataSize
	}
	return 0
}

// StreamIdentifier represents a stream.
type StreamIdentifier struct {
	// Set of labels representing the stream.
	Labels []*StreamIdentifier_Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (m *StreamIdentifier) Reset()      { *m = StreamIdentifier{} }
func (*StreamIdentifier) ProtoMessage() {}
func (*StreamIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{2}
}
func (m *StreamIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamIdentifier.Merge(m, src)
}
func (m *StreamIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *StreamIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_StreamIdentifier proto.InternalMessageInfo

func (m *StreamIdentifier) GetLabels() []*StreamIdentifier_Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

type StreamIdentifier_Label struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *StreamIdentifier_Label) Reset()      { *m = StreamIdentifier_Label{} }
func (*StreamIdentifier_Label) ProtoMessage() {}
func (*StreamIdentifier_Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{2, 0}
}
func (m *StreamIdentifier_Label) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamIdentifier_Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamIdentifier_Label.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamIdentifier_Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamIdentifier_Label.Merge(m, src)
}
func (m *StreamIdentifier_Label) XXX_Size() int {
	return m.Size()
}
func (m *StreamIdentifier_Label) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamIdentifier_Label.DiscardUnknown(m)
}

var xxx_messageInfo_StreamIdentifier_Label proto.InternalMessageInfo

func (m *StreamIdentifier_Label) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamIdentifier_Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// StreamMetadata describes the metadata for a stream.
type StreamMetadata struct {
	// Columns within the stream.
	Columns []*ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *StreamMetadata) Reset()      { *m = StreamMetadata{} }
func (*StreamMetadata) ProtoMessage() {}
func (*StreamMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{3}
}
func (m *StreamMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMetadata.Merge(m, src)
}
func (m *StreamMetadata) XXX_Size() int {
	return m.Size()
}
func (m *StreamMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMetadata proto.InternalMessageInfo

func (m *StreamMetadata) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

// ColumnInfo describes an individual column within a stream.
type ColumnInfo struct {
	// Name of the column; set only for COLUMN_TYPE_METADATA.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Column type.
	Type ColumnType `protobuf:"varint,2,opt,name=type,proto3,enum=dataobj.metadata.logstreams.v1.ColumnType" json:"type,omitempty"`
	// Total number of rows in the entire column.
	RowsCount uint32 `protobuf:"varint,3,opt,name=rows_count,json=rowsCount,proto3" json:"rows_count,omitempty"`
	// Compression type used for all pages.
	Compression CompressionType `protobuf:"varint,4,opt,name=compression,proto3,enum=dataobj.metadata.logstreams.v1.CompressionType" json:"compression,omitempty"`
	// Total uncompressed size of all pages in the column.
	UncompressedSize uint32 `protobuf:"varint,5,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Total compressed size of all pages in the column. Compressed size may
	// match uncompressed size if no compression is used.
	CompressedSize uint32 `protobuf:"varint,6,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	// Byte offset from the start of the data object to the column's metadata.
	MetadataOffset uint32 `protobuf:"varint,7,opt,name=metadata_offset,json=metadataOffset,proto3" json:"metadata_offset,omitempty"`
	// Size of the column's metadata in bytes.
	MetadataSize uint32 `protobuf:"varint,8,opt,name=metadata_size,json=metadataSize,proto3" json:"metadata_size,omitempty"`
	// Statistics for the column.
	Statistics *Statistics `protobuf:"bytes,9,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *ColumnInfo) Reset()      { *m = ColumnInfo{} }
func (*ColumnInfo) ProtoMessage() {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{4}
}
func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(m, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnInfo) GetType() ColumnType {
	if m != nil {
		return m.Type
	}
	return COLUMN_TYPE_UNSPECIFIED
}

func (m *ColumnInfo) GetRowsCount() uint32 {
	if m != nil {
		return m.RowsCount
	}
	return 0
}

func (m *ColumnInfo) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return COMPRESSION_TYPE_UNSPECIFIED
}

func (m *ColumnInfo) GetUncompressedSize() uint32 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *ColumnInfo) GetCompressedSize() uint32 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *ColumnInfo) GetMetadataOffset() uint32 {
	if m != nil {
		return m.MetadataOffset
	}
	return 0
}

func (m *ColumnInfo) GetMetadataSize() uint32 {
	if m != nil {
		return m.MetadataSize
	}
	return 0
}

func (m *ColumnInfo) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// Statistics about a coulmn or a page. All statistics are optional and are
// conditionally set depending on the column type.
type Statistics struct {
	// Minimum value. Set for COLUMN_TYPE_TIMESTAMP.
	MinValue []byte `protobuf:"bytes,1,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// Maximum value. Set for COLUMN_TYPE_TIMESTAMP.
	MaxValue []byte `protobuf:"bytes,2,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// A sketch of distinct values. Set for COLUMN_TYPE_METADATA.
	CountDistinctSketch uint32 `protobuf:"varint,3,opt,name=count_distinct_sketch,json=countDistinctSketch,proto3" json:"count_distinct_sketch,omitempty"`
}

func (m *Statistics) Reset()      { *m = Statistics{} }
func (*Statistics) ProtoMessage() {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{5}
}
func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return m.Size()
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetMinValue() []byte {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *Statistics) GetMaxValue() []byte {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (m *Statistics) GetCountDistinctSketch() uint32 {
	if m != nil {
		return m.CountDistinctSketch
	}
	return 0
}

// ColumnMetadata describes the metadata for a column.
type ColumnMetadata struct {
	// Pages within the column.
	Pages []*PageInfo `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (m *ColumnMetadata) Reset()      { *m = ColumnMetadata{} }
func (*ColumnMetadata) ProtoMessage() {}
func (*ColumnMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{6}
}
func (m *ColumnMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnMetadata.Merge(m, src)
}
func (m *ColumnMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ColumnMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnMetadata proto.InternalMessageInfo

func (m *ColumnMetadata) GetPages() []*PageInfo {
	if m != nil {
		return m.Pages
	}
	return nil
}

// Page describes an individual page within a column.
type PageInfo struct {
	// Uncompressed size of the page within the data object.
	UncompressedSize uint32 `protobuf:"varint,1,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Compressed size of the page within the data object. Compression size
	// will match uncompressed size if no compression is used.
	CompressedSize uint32 `protobuf:"varint,2,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	// CRC32 checksum of the page data.
	Crc32 uint32 `protobuf:"varint,3,opt,name=crc32,proto3" json:"crc32,omitempty"`
	// Number of rows in the page.
	RowsCount uint32 `protobuf:"varint,4,opt,name=rows_count,json=rowsCount,proto3" json:"rows_count,omitempty"`
	// Compression type used for the page.
	Compression CompressionType `protobuf:"varint,5,opt,name=compression,proto3,enum=dataobj.metadata.logstreams.v1.CompressionType" json:"compression,omitempty"`
	// Encoding type used for the page.
	Encoding EncodingType `protobuf:"varint,6,opt,name=encoding,proto3,enum=dataobj.metadata.logstreams.v1.EncodingType" json:"encoding,omitempty"`
	// Byte offset from the start of the data object to the page's data.
	DataOffset uint32 `protobuf:"varint,7,opt,name=data_offset,json=dataOffset,proto3" json:"data_offset,omitempty"`
	// Size of the page's data in bytes.
	DataSize uint32 `protobuf:"varint,8,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// Optional statistics for the page.
	Statistics *Statistics `protobuf:"bytes,9,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *PageInfo) Reset()      { *m = PageInfo{} }
func (*PageInfo) ProtoMessage() {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f766c9bfb638b9a8, []int{7}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetUncompressedSize() uint32 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *PageInfo) GetCompressedSize() uint32 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *PageInfo) GetCrc32() uint32 {
	if m != nil {
		return m.Crc32
	}
	return 0
}

func (m *PageInfo) GetRowsCount() uint32 {
	if m != nil {
		return m.RowsCount
	}
	return 0
}

func (m *PageInfo) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return COMPRESSION_TYPE_UNSPECIFIED
}

func (m *PageInfo) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return ENCODING_TYPE_UNSPECIFIED
}

func (m *PageInfo) GetDataOffset() uint32 {
	if m != nil {
		return m.DataOffset
	}
	return 0
}

func (m *PageInfo) GetDataSize() uint32 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *PageInfo) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func init() {
	proto.RegisterEnum("dataobj.metadata.logstreams.v1.ColumnType", ColumnType_name, ColumnType_value)
	proto.RegisterEnum("dataobj.metadata.logstreams.v1.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("dataobj.metadata.logstreams.v1.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterType((*Metadata)(nil), "dataobj.metadata.logstreams.v1.Metadata")
	proto.RegisterType((*StreamInfo)(nil), "dataobj.metadata.logstreams.v1.StreamInfo")
	proto.RegisterType((*StreamIdentifier)(nil), "dataobj.metadata.logstreams.v1.StreamIdentifier")
	proto.RegisterType((*StreamIdentifier_Label)(nil), "dataobj.metadata.logstreams.v1.StreamIdentifier.Label")
	proto.RegisterType((*StreamMetadata)(nil), "dataobj.metadata.logstreams.v1.StreamMetadata")
	proto.RegisterType((*ColumnInfo)(nil), "dataobj.metadata.logstreams.v1.ColumnInfo")
	proto.RegisterType((*Statistics)(nil), "dataobj.metadata.logstreams.v1.Statistics")
	proto.RegisterType((*ColumnMetadata)(nil), "dataobj.metadata.logstreams.v1.ColumnMetadata")
	proto.RegisterType((*PageInfo)(nil), "dataobj.metadata.logstreams.v1.PageInfo")
}

func init() {
	proto.RegisterFile("pkg/dataobj/internal/logstreamsmd/logstreamsmd.proto", fileDescriptor_f766c9bfb638b9a8)
}

var fileDescriptor_f766c9bfb638b9a8 = []byte{
	// 849 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x73, 0xdb, 0x44,
	0x14, 0xf6, 0xda, 0x71, 0x6a, 0xbf, 0xa4, 0xae, 0xd8, 0xa6, 0x53, 0x97, 0x50, 0x91, 0x11, 0x07,
	0x32, 0x81, 0x91, 0xa8, 0xc3, 0x70, 0x62, 0x3a, 0x63, 0x6c, 0x51, 0xc4, 0xd8, 0xb2, 0x90, 0xdc,
	0xce, 0xb4, 0x17, 0xcd, 0x46, 0x5e, 0xbb, 0x22, 0x96, 0xe4, 0x91, 0xe4, 0x90, 0xe6, 0xc4, 0x70,
	0xe0, 0xcc, 0x85, 0xff, 0xc0, 0x8f, 0xe0, 0xc4, 0x89, 0x63, 0x8e, 0x3d, 0x12, 0xe7, 0xc2, 0xb1,
	0x3f, 0x81, 0xd1, 0x4a, 0x72, 0x54, 0xd9, 0x60, 0x31, 0x03, 0xb7, 0xdd, 0xf7, 0xbd, 0xef, 0xed,
	0xdb, 0xf7, 0x7d, 0xab, 0x11, 0x7c, 0x3a, 0x3b, 0x9d, 0x48, 0x23, 0x12, 0x12, 0xef, 0xe4, 0x5b,
	0xc9, 0x76, 0x43, 0xea, 0xbb, 0x64, 0x2a, 0x4d, 0xbd, 0x49, 0x10, 0xfa, 0x94, 0x38, 0x81, 0x33,
	0x7a, 0x6b, 0x23, 0xce, 0x7c, 0x2f, 0xf4, 0x30, 0x9f, 0x30, 0x44, 0x87, 0x86, 0x24, 0x5a, 0x8b,
	0x37, 0x49, 0xe2, 0xd9, 0x23, 0x41, 0x83, 0x5a, 0x3f, 0x41, 0x70, 0x17, 0x6e, 0x25, 0x48, 0x13,
	0x1d, 0x54, 0x0e, 0x77, 0x5a, 0x47, 0xe2, 0x3f, 0xb3, 0x45, 0x83, 0x2d, 0x15, 0x77, 0xec, 0xe9,
	0x29, 0x55, 0xf8, 0xa1, 0x0c, 0x70, 0x13, 0xc7, 0x1a, 0x80, 0x3d, 0xa2, 0x6e, 0x68, 0x8f, 0x6d,
	0xea, 0x37, 0xd1, 0x01, 0x3a, 0xdc, 0x69, 0x7d, 0x52, 0xb0, 0xee, 0x92, 0xa7, 0x67, 0x6a, 0xe0,
	0x8f, 0xe0, 0x9d, 0xb9, 0x6b, 0x79, 0xce, 0xcc, 0xa7, 0x41, 0x40, 0x47, 0x66, 0x60, 0x5f, 0xd0,
	0x66, 0xf9, 0x00, 0x1d, 0xde, 0xd6, 0xb9, 0x2c, 0x60, 0xd8, 0x17, 0x14, 0x7f, 0x08, 0x77, 0xf2,
	0xa9, 0x15, 0x96, 0xda, 0x58, 0x4d, 0x4c, 0x9b, 0x31, 0xbd, 0xf1, 0x38, 0xa0, 0x61, 0x73, 0x2b,
	0x4e, 0x4c, 0xc3, 0x03, 0x16, 0xc5, 0x1f, 0xc0, 0xed, 0x65, 0x22, 0xab, 0x57, 0x65, 0x69, 0xbb,
	0x69, 0x30, 0xaa, 0x26, 0xfc, 0x8c, 0x80, 0xcb, 0x5f, 0x02, 0xab, 0xb0, 0x3d, 0x25, 0x27, 0x74,
	0x9a, 0x8e, 0xf7, 0xb3, 0x7f, 0x3b, 0x06, 0xb1, 0x17, 0xd1, 0xf5, 0xa4, 0xca, 0xbb, 0x8f, 0xa0,
	0xca, 0x02, 0x18, 0xc3, 0x96, 0x4b, 0x1c, 0xca, 0xa6, 0x5b, 0xd7, 0xd9, 0x1a, 0xef, 0x41, 0xf5,
	0x8c, 0x4c, 0xe7, 0xf1, 0x64, 0xea, 0x7a, 0xbc, 0x11, 0x9e, 0x41, 0x23, 0x2e, 0x9a, 0x15, 0xdd,
	0xf2, 0xa6, 0x73, 0xc7, 0x2d, 0x2c, 0x7a, 0x87, 0xa5, 0xc7, 0xa2, 0x27, 0x54, 0xe1, 0xb7, 0x0a,
	0xc0, 0x4d, 0x7c, 0x6d, 0x43, 0x8f, 0x61, 0x2b, 0x7c, 0x35, 0x8b, 0xfb, 0x69, 0x14, 0x3d, 0x65,
	0xf8, 0x6a, 0x46, 0x75, 0xc6, 0xc3, 0x0f, 0x01, 0x7c, 0xef, 0xbb, 0xc0, 0xb4, 0xbc, 0xb9, 0x1b,
	0x26, 0x22, 0xd6, 0xa3, 0x48, 0x27, 0x0a, 0xe0, 0x6f, 0x60, 0x27, 0x55, 0xd4, 0xf6, 0x5c, 0xa6,
	0x5d, 0xa3, 0x25, 0x6d, 0x3e, 0x65, 0x49, 0x61, 0x47, 0x65, 0x6b, 0xac, 0x37, 0x5a, 0xb5, 0xb8,
	0xd1, 0xb6, 0x8b, 0x1a, 0xed, 0x56, 0x31, 0xa3, 0xd5, 0x56, 0x8d, 0x86, 0xbf, 0x06, 0x08, 0x42,
	0x12, 0xda, 0x41, 0x68, 0x5b, 0x41, 0xb3, 0xce, 0x9e, 0x57, 0x81, 0x67, 0x9b, 0x32, 0xf4, 0x0c,
	0x5b, 0xb8, 0x88, 0x1e, 0x6e, 0xba, 0xc3, 0xfb, 0x50, 0x77, 0x6c, 0xd7, 0x8c, 0x4d, 0x14, 0x09,
	0xb9, 0xab, 0xd7, 0x1c, 0xdb, 0x7d, 0x16, 0xed, 0x19, 0x48, 0xce, 0xcd, 0x1b, 0x87, 0x45, 0x20,
	0x39, 0x8f, 0xc1, 0x16, 0xdc, 0x63, 0x22, 0x99, 0xa3, 0xa8, 0x94, 0x6b, 0x85, 0x66, 0x70, 0x4a,
	0x43, 0xeb, 0x65, 0x22, 0xda, 0x5d, 0x06, 0x76, 0x13, 0xcc, 0x60, 0x90, 0xa0, 0x41, 0x23, 0x56,
	0x7c, 0x69, 0xcc, 0xc7, 0x50, 0x9d, 0x91, 0x09, 0x4d, 0x6d, 0x79, 0xb8, 0xe9, 0x52, 0x1a, 0x99,
	0x50, 0x66, 0xca, 0x98, 0x26, 0xfc, 0x5a, 0x81, 0x5a, 0x1a, 0x5b, 0x2f, 0x25, 0x2a, 0x2e, 0x65,
	0x79, 0xad, 0x94, 0x7b, 0x50, 0xb5, 0x7c, 0xeb, 0xb8, 0x95, 0x5c, 0x2c, 0xde, 0xe4, 0x8c, 0xba,
	0xb5, 0xc1, 0xa8, 0xd5, 0xff, 0xc0, 0xa8, 0x5f, 0x41, 0x8d, 0xba, 0x96, 0x37, 0xb2, 0xdd, 0x09,
	0x33, 0x5d, 0xa3, 0xf5, 0xf1, 0xa6, 0x7a, 0x72, 0x92, 0xcf, 0x8a, 0x2d, 0xd9, 0xf8, 0x7d, 0xd8,
	0x59, 0x35, 0x26, 0x64, 0x4c, 0xb9, 0x0f, 0xf5, 0xbc, 0x21, 0x6b, 0xff, 0x87, 0x19, 0x8f, 0xce,
	0xd3, 0x0f, 0x4a, 0xd4, 0x21, 0xde, 0x87, 0xfb, 0x9d, 0x41, 0xef, 0x69, 0x5f, 0x35, 0x87, 0xcf,
	0x35, 0xd9, 0x7c, 0xaa, 0x1a, 0x9a, 0xdc, 0x51, 0xbe, 0x54, 0xe4, 0x2e, 0x57, 0xc2, 0x0f, 0xe0,
	0x5e, 0x16, 0x1c, 0x2a, 0x7d, 0xd9, 0x18, 0xb6, 0xfb, 0x1a, 0x87, 0x70, 0x13, 0xf6, 0xb2, 0x50,
	0x5f, 0x1e, 0xb6, 0xbb, 0xed, 0x61, 0x9b, 0x2b, 0xe7, 0x91, 0xde, 0xe0, 0x89, 0xd9, 0x53, 0x54,
	0x99, 0xab, 0x1c, 0xfd, 0x88, 0xe0, 0x4e, 0x6e, 0xdc, 0xf8, 0x00, 0xde, 0xeb, 0x0c, 0xfa, 0x9a,
	0x2e, 0x1b, 0x86, 0x32, 0xf8, 0xfb, 0x26, 0x72, 0x19, 0xea, 0x40, 0x95, 0x39, 0x14, 0x37, 0x9f,
	0x83, 0x0c, 0xb5, 0xad, 0x69, 0xcf, 0xb9, 0xf2, 0x5a, 0xde, 0x0b, 0x63, 0xd8, 0xe5, 0x2a, 0x47,
	0x26, 0xec, 0x66, 0x65, 0xc2, 0x0f, 0xe1, 0x81, 0xac, 0x76, 0x06, 0x5d, 0x45, 0x7d, 0xb2, 0xae,
	0x83, 0xfb, 0x70, 0xf7, 0x6d, 0x58, 0xeb, 0xb5, 0x15, 0x95, 0x43, 0xab, 0x40, 0x57, 0xee, 0x45,
	0x33, 0xf8, 0xc2, 0xbf, 0xbc, 0xe2, 0x4b, 0xaf, 0xaf, 0xf8, 0xd2, 0x9b, 0x2b, 0x1e, 0x7d, 0xbf,
	0xe0, 0xd1, 0x2f, 0x0b, 0x1e, 0xfd, 0xbe, 0xe0, 0xd1, 0xe5, 0x82, 0x47, 0x7f, 0x2c, 0x78, 0xf4,
	0xe7, 0x82, 0x2f, 0xbd, 0x59, 0xf0, 0xe8, 0xa7, 0x6b, 0xbe, 0x74, 0x79, 0xcd, 0x97, 0x5e, 0x5f,
	0xf3, 0xa5, 0x17, 0x9f, 0x4f, 0xec, 0xf0, 0xe5, 0xfc, 0x44, 0xb4, 0x3c, 0x47, 0x9a, 0xf8, 0x64,
	0x4c, 0x5c, 0x22, 0x4d, 0xbd, 0x53, 0x5b, 0x3a, 0x3b, 0x96, 0x36, 0xfe, 0xa3, 0x9c, 0x6c, 0xb3,
	0xff, 0x92, 0xe3, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x95, 0xed, 0x2e, 0xb3, 0xcf, 0x08, 0x00,
	0x00,
}

func (x ColumnType) String() string {
	s, ok := ColumnType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CompressionType) String() string {
	s, ok := CompressionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Streams) != len(that1.Streams) {
		return false
	}
	for i := range this.Streams {
		if !this.Streams[i].Equal(that1.Streams[i]) {
			return false
		}
	}
	return true
}
func (this *StreamInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamInfo)
	if !ok {
		that2, ok := that.(StreamInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Identifier.Equal(that1.Identifier) {
		return false
	}
	if this.UncompressedSize != that1.UncompressedSize {
		return false
	}
	if this.CompressedSize != that1.CompressedSize {
		return false
	}
	if this.MetadataOffset != that1.MetadataOffset {
		return false
	}
	if this.MetadataSize != that1.MetadataSize {
		return false
	}
	return true
}
func (this *StreamIdentifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamIdentifier)
	if !ok {
		that2, ok := that.(StreamIdentifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if !this.Labels[i].Equal(that1.Labels[i]) {
			return false
		}
	}
	return true
}
func (this *StreamIdentifier_Label) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamIdentifier_Label)
	if !ok {
		that2, ok := that.(StreamIdentifier_Label)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *StreamMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamMetadata)
	if !ok {
		that2, ok := that.(StreamMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *ColumnInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnInfo)
	if !ok {
		that2, ok := that.(ColumnInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RowsCount != that1.RowsCount {
		return false
	}
	if this.Compression != that1.Compression {
		return false
	}
	if this.UncompressedSize != that1.UncompressedSize {
		return false
	}
	if this.CompressedSize != that1.CompressedSize {
		return false
	}
	if this.MetadataOffset != that1.MetadataOffset {
		return false
	}
	if this.MetadataSize != that1.MetadataSize {
		return false
	}
	if !this.Statistics.Equal(that1.Statistics) {
		return false
	}
	return true
}
func (this *Statistics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Statistics)
	if !ok {
		that2, ok := that.(Statistics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MinValue, that1.MinValue) {
		return false
	}
	if !bytes.Equal(this.MaxValue, that1.MaxValue) {
		return false
	}
	if this.CountDistinctSketch != that1.CountDistinctSketch {
		return false
	}
	return true
}
func (this *ColumnMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnMetadata)
	if !ok {
		that2, ok := that.(ColumnMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pages) != len(that1.Pages) {
		return false
	}
	for i := range this.Pages {
		if !this.Pages[i].Equal(that1.Pages[i]) {
			return false
		}
	}
	return true
}
func (this *PageInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PageInfo)
	if !ok {
		that2, ok := that.(PageInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UncompressedSize != that1.UncompressedSize {
		return false
	}
	if this.CompressedSize != that1.CompressedSize {
		return false
	}
	if this.Crc32 != that1.Crc32 {
		return false
	}
	if this.RowsCount != that1.RowsCount {
		return false
	}
	if this.Compression != that1.Compression {
		return false
	}
	if this.Encoding != that1.Encoding {
		return false
	}
	if this.DataOffset != that1.DataOffset {
		return false
	}
	if this.DataSize != that1.DataSize {
		return false
	}
	if !this.Statistics.Equal(that1.Statistics) {
		return false
	}
	return true
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logstreamsmd.Metadata{")
	if this.Streams != nil {
		s = append(s, "Streams: "+fmt.Sprintf("%#v", this.Streams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&logstreamsmd.StreamInfo{")
	if this.Identifier != nil {
		s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	}
	s = append(s, "UncompressedSize: "+fmt.Sprintf("%#v", this.UncompressedSize)+",\n")
	s = append(s, "CompressedSize: "+fmt.Sprintf("%#v", this.CompressedSize)+",\n")
	s = append(s, "MetadataOffset: "+fmt.Sprintf("%#v", this.MetadataOffset)+",\n")
	s = append(s, "MetadataSize: "+fmt.Sprintf("%#v", this.MetadataSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamIdentifier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logstreamsmd.StreamIdentifier{")
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamIdentifier_Label) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&logstreamsmd.StreamIdentifier_Label{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logstreamsmd.StreamMetadata{")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColumnInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&logstreamsmd.ColumnInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "RowsCount: "+fmt.Sprintf("%#v", this.RowsCount)+",\n")
	s = append(s, "Compression: "+fmt.Sprintf("%#v", this.Compression)+",\n")
	s = append(s, "UncompressedSize: "+fmt.Sprintf("%#v", this.UncompressedSize)+",\n")
	s = append(s, "CompressedSize: "+fmt.Sprintf("%#v", this.CompressedSize)+",\n")
	s = append(s, "MetadataOffset: "+fmt.Sprintf("%#v", this.MetadataOffset)+",\n")
	s = append(s, "MetadataSize: "+fmt.Sprintf("%#v", this.MetadataSize)+",\n")
	if this.Statistics != nil {
		s = append(s, "Statistics: "+fmt.Sprintf("%#v", this.Statistics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Statistics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&logstreamsmd.Statistics{")
	s = append(s, "MinValue: "+fmt.Sprintf("%#v", this.MinValue)+",\n")
	s = append(s, "MaxValue: "+fmt.Sprintf("%#v", this.MaxValue)+",\n")
	s = append(s, "CountDistinctSketch: "+fmt.Sprintf("%#v", this.CountDistinctSketch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColumnMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logstreamsmd.ColumnMetadata{")
	if this.Pages != nil {
		s = append(s, "Pages: "+fmt.Sprintf("%#v", this.Pages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PageInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&logstreamsmd.PageInfo{")
	s = append(s, "UncompressedSize: "+fmt.Sprintf("%#v", this.UncompressedSize)+",\n")
	s = append(s, "CompressedSize: "+fmt.Sprintf("%#v", this.CompressedSize)+",\n")
	s = append(s, "Crc32: "+fmt.Sprintf("%#v", this.Crc32)+",\n")
	s = append(s, "RowsCount: "+fmt.Sprintf("%#v", this.RowsCount)+",\n")
	s = append(s, "Compression: "+fmt.Sprintf("%#v", this.Compression)+",\n")
	s = append(s, "Encoding: "+fmt.Sprintf("%#v", this.Encoding)+",\n")
	s = append(s, "DataOffset: "+fmt.Sprintf("%#v", this.DataOffset)+",\n")
	s = append(s, "DataSize: "+fmt.Sprintf("%#v", this.DataSize)+",\n")
	if this.Statistics != nil {
		s = append(s, "Statistics: "+fmt.Sprintf("%#v", this.Statistics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogstreamsmd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogstreamsmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MetadataSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.MetadataSize))
		i--
		dAtA[i] = 0x28
	}
	if m.MetadataOffset != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.MetadataOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.CompressedSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x18
	}
	if m.UncompressedSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Identifier != nil {
		{
			size, err := m.Identifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogstreamsmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogstreamsmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamIdentifier_Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamIdentifier_Label) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamIdentifier_Label) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogstreamsmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogstreamsmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.MetadataSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.MetadataSize))
		i--
		dAtA[i] = 0x40
	}
	if m.MetadataOffset != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.MetadataOffset))
		i--
		dAtA[i] = 0x38
	}
	if m.CompressedSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x30
	}
	if m.UncompressedSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x28
	}
	if m.Compression != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.Compression))
		i--
		dAtA[i] = 0x20
	}
	if m.RowsCount != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.RowsCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Statistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Statistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountDistinctSketch != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.CountDistinctSketch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MaxValue) > 0 {
		i -= len(m.MaxValue)
		copy(dAtA[i:], m.MaxValue)
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(len(m.MaxValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinValue) > 0 {
		i -= len(m.MinValue)
		copy(dAtA[i:], m.MinValue)
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(len(m.MinValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ColumnMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogstreamsmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogstreamsmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DataSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.DataSize))
		i--
		dAtA[i] = 0x40
	}
	if m.DataOffset != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.DataOffset))
		i--
		dAtA[i] = 0x38
	}
	if m.Encoding != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.Encoding))
		i--
		dAtA[i] = 0x30
	}
	if m.Compression != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.Compression))
		i--
		dAtA[i] = 0x28
	}
	if m.RowsCount != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.RowsCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Crc32 != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.Crc32))
		i--
		dAtA[i] = 0x18
	}
	if m.CompressedSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x10
	}
	if m.UncompressedSize != 0 {
		i = encodeVarintLogstreamsmd(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogstreamsmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogstreamsmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovLogstreamsmd(uint64(l))
		}
	}
	return n
}

func (m *StreamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		l = m.Identifier.Size()
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	if m.UncompressedSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.UncompressedSize))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.CompressedSize))
	}
	if m.MetadataOffset != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.MetadataOffset))
	}
	if m.MetadataSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.MetadataSize))
	}
	return n
}

func (m *StreamIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovLogstreamsmd(uint64(l))
		}
	}
	return n
}

func (m *StreamIdentifier_Label) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	return n
}

func (m *StreamMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovLogstreamsmd(uint64(l))
		}
	}
	return n
}

func (m *ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.Type))
	}
	if m.RowsCount != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.RowsCount))
	}
	if m.Compression != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.Compression))
	}
	if m.UncompressedSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.UncompressedSize))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.CompressedSize))
	}
	if m.MetadataOffset != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.MetadataOffset))
	}
	if m.MetadataSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.MetadataSize))
	}
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	return n
}

func (m *Statistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinValue)
	if l > 0 {
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	l = len(m.MaxValue)
	if l > 0 {
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	if m.CountDistinctSketch != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.CountDistinctSketch))
	}
	return n
}

func (m *ColumnMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovLogstreamsmd(uint64(l))
		}
	}
	return n
}

func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UncompressedSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.UncompressedSize))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.CompressedSize))
	}
	if m.Crc32 != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.Crc32))
	}
	if m.RowsCount != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.RowsCount))
	}
	if m.Compression != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.Compression))
	}
	if m.Encoding != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.Encoding))
	}
	if m.DataOffset != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.DataOffset))
	}
	if m.DataSize != 0 {
		n += 1 + sovLogstreamsmd(uint64(m.DataSize))
	}
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovLogstreamsmd(uint64(l))
	}
	return n
}

func sovLogstreamsmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogstreamsmd(x uint64) (n int) {
	return sovLogstreamsmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStreams := "[]*StreamInfo{"
	for _, f := range this.Streams {
		repeatedStringForStreams += strings.Replace(f.String(), "StreamInfo", "StreamInfo", 1) + ","
	}
	repeatedStringForStreams += "}"
	s := strings.Join([]string{`&Metadata{`,
		`Streams:` + repeatedStringForStreams + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamInfo{`,
		`Identifier:` + strings.Replace(this.Identifier.String(), "StreamIdentifier", "StreamIdentifier", 1) + `,`,
		`UncompressedSize:` + fmt.Sprintf("%v", this.UncompressedSize) + `,`,
		`CompressedSize:` + fmt.Sprintf("%v", this.CompressedSize) + `,`,
		`MetadataOffset:` + fmt.Sprintf("%v", this.MetadataOffset) + `,`,
		`MetadataSize:` + fmt.Sprintf("%v", this.MetadataSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabels := "[]*StreamIdentifier_Label{"
	for _, f := range this.Labels {
		repeatedStringForLabels += strings.Replace(fmt.Sprintf("%v", f), "StreamIdentifier_Label", "StreamIdentifier_Label", 1) + ","
	}
	repeatedStringForLabels += "}"
	s := strings.Join([]string{`&StreamIdentifier{`,
		`Labels:` + repeatedStringForLabels + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamIdentifier_Label) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamIdentifier_Label{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForColumns := "[]*ColumnInfo{"
	for _, f := range this.Columns {
		repeatedStringForColumns += strings.Replace(f.String(), "ColumnInfo", "ColumnInfo", 1) + ","
	}
	repeatedStringForColumns += "}"
	s := strings.Join([]string{`&StreamMetadata{`,
		`Columns:` + repeatedStringForColumns + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColumnInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ColumnInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`RowsCount:` + fmt.Sprintf("%v", this.RowsCount) + `,`,
		`Compression:` + fmt.Sprintf("%v", this.Compression) + `,`,
		`UncompressedSize:` + fmt.Sprintf("%v", this.UncompressedSize) + `,`,
		`CompressedSize:` + fmt.Sprintf("%v", this.CompressedSize) + `,`,
		`MetadataOffset:` + fmt.Sprintf("%v", this.MetadataOffset) + `,`,
		`MetadataSize:` + fmt.Sprintf("%v", this.MetadataSize) + `,`,
		`Statistics:` + strings.Replace(this.Statistics.String(), "Statistics", "Statistics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Statistics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Statistics{`,
		`MinValue:` + fmt.Sprintf("%v", this.MinValue) + `,`,
		`MaxValue:` + fmt.Sprintf("%v", this.MaxValue) + `,`,
		`CountDistinctSketch:` + fmt.Sprintf("%v", this.CountDistinctSketch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColumnMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPages := "[]*PageInfo{"
	for _, f := range this.Pages {
		repeatedStringForPages += strings.Replace(f.String(), "PageInfo", "PageInfo", 1) + ","
	}
	repeatedStringForPages += "}"
	s := strings.Join([]string{`&ColumnMetadata{`,
		`Pages:` + repeatedStringForPages + `,`,
		`}`,
	}, "")
	return s
}
func (this *PageInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PageInfo{`,
		`UncompressedSize:` + fmt.Sprintf("%v", this.UncompressedSize) + `,`,
		`CompressedSize:` + fmt.Sprintf("%v", this.CompressedSize) + `,`,
		`Crc32:` + fmt.Sprintf("%v", this.Crc32) + `,`,
		`RowsCount:` + fmt.Sprintf("%v", this.RowsCount) + `,`,
		`Compression:` + fmt.Sprintf("%v", this.Compression) + `,`,
		`Encoding:` + fmt.Sprintf("%v", this.Encoding) + `,`,
		`DataOffset:` + fmt.Sprintf("%v", this.DataOffset) + `,`,
		`DataSize:` + fmt.Sprintf("%v", this.DataSize) + `,`,
		`Statistics:` + strings.Replace(this.Statistics.String(), "Statistics", "Statistics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogstreamsmd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, &StreamInfo{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identifier == nil {
				m.Identifier = &StreamIdentifier{}
			}
			if err := m.Identifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOffset", wireType)
			}
			m.MetadataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSize", wireType)
			}
			m.MetadataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &StreamIdentifier_Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamIdentifier_Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ColumnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsCount", wireType)
			}
			m.RowsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= CompressionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOffset", wireType)
			}
			m.MetadataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSize", wireType)
			}
			m.MetadataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = &Statistics{}
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Statistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinValue = append(m.MinValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MinValue == nil {
				m.MinValue = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxValue = append(m.MaxValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxValue == nil {
				m.MaxValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountDistinctSketch", wireType)
			}
			m.CountDistinctSketch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountDistinctSketch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &PageInfo{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32", wireType)
			}
			m.Crc32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsCount", wireType)
			}
			m.RowsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= CompressionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= EncodingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataOffset", wireType)
			}
			m.DataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = &Statistics{}
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogstreamsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogstreamsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogstreamsmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogstreamsmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogstreamsmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogstreamsmd
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLogstreamsmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogstreamsmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogstreamsmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLogstreamsmd
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogstreamsmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogstreamsmd   = fmt.Errorf("proto: integer overflow")
)
