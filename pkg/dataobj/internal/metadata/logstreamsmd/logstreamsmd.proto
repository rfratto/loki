// logstreamsmd.proto holds metadata for the log streams section of a data
// object. The log streams section contains logs partitioned by stream.
syntax = "proto3";

package dataobj.metadata.logstreams.v1;

option go_package = "github.com/grafana/loki/v3/pkg/dataobj/internal/metadata/logstreamsmd";

// Metadata describes the metadata for the streams section.
message Metadata {
  // Streams within the section.
  repeated StreamInfo streams = 1;
}

// StreamInfo describes an individual log stream within the streams section.
message StreamInfo {
  // Label set representing the stream.
  StreamIdentifier identifier = 1;

  // Total uncompressed size of the entire stream.
  uint32 uncompressed_size = 2;

  // Total compressed size of the entire stream. Compressed size may match
  // uncompressed size if no compression is used.
  uint32 compressed_size = 3;

  // Byte offset from the start of the data object to the stream's metadata.
  uint32 metadata_offset = 4;

  // Size of the stream's metadata in bytes.
  uint32 metadata_size = 5;
}

// StreamIdentifier represents a stream.
message StreamIdentifier {
  message Label {
    string name = 1;
    string value = 2;
  }

  // Set of labels representing the stream.
  repeated Label labels = 1;
}

// StreamMetadata describes the metadata for a stream.
message StreamMetadata {
  // Columns within the stream.
  repeated ColumnInfo columns = 1;
}

// ColumnInfo describes an individual column within a stream.
message ColumnInfo {
  // Name of the column; set only for COLUMN_TYPE_METADATA.
  string name = 1;

  // Column type.
  ColumnType type = 2;

  // Total number of rows in the entire column.
  uint32 rows_count = 3;

  // Compression type used for all pages.
  CompressionType compression = 4;

  // Total uncompressed size of all pages in the column.
  uint32 uncompressed_size = 5;

  // Total compressed size of all pages in the column. Compressed size may
  // match uncompressed size if no compression is used.
  uint32 compressed_size = 6;

  // Byte offset from the start of the data object to the column's metadata.
  uint32 metadata_offset = 7;

  // Size of the column's metadata in bytes.
  uint32 metadata_size = 8;

  // Statistics for the column.
  Statistics statistics = 9;
}

// ColumnType represents the valid types that a stream's column can have.
enum ColumnType {
  // Invalid column type.
  COLUMN_TYPE_UNSPECIFIED = 0;

  // A column of timestamps of log lines.
  COLUMN_TYPE_TIMESTAMP = 1;

  // A column containing structured metadata values for a specific key.
  COLUMN_TYPE_METADATA = 2;

  // A column containing log lines.
  COLUMN_TYPE_LOG_LINE = 3;
}

// CompressionType represents the valid compression types that can be used for
// compressing a column's data page.
enum CompressionType {
  // Invalid compression type.
  COMPRESSION_TYPE_UNSPECIFIED = 0;

  // No compression.
  COMPRESSION_TYPE_NONE = 1;

  // Snappy compression.
  COMPRESSION_TYPE_SNAPPY = 2;

  // Zstd compression.
  COMPRESSION_TYPE_ZSTD = 3;
}

// Statistics about a coulmn or a page. All statistics are optional and are
// conditionally set depending on the column type.
message Statistics {
  // Minimum value. Set for COLUMN_TYPE_TIMESTAMP.
  bytes min_value = 1;

  // Maximum value. Set for COLUMN_TYPE_TIMESTAMP.
  bytes max_value = 2;

  // A sketch of distinct values. Set for COLUMN_TYPE_METADATA.
  uint32 count_distinct_sketch = 3;
}

// ColumnMetadata describes the metadata for a column.
message ColumnMetadata {
  // Pages within the column.
  repeated PageInfo pages = 1;
}

// Page describes an individual page within a column.
message PageInfo {
  // Uncompressed size of the page within the data object.
  uint32 uncompressed_size = 1;

  // Compressed size of the page within the data object. Compression size
  // will match uncompressed size if no compression is used.
  uint32 compressed_size = 2;

  // CRC32 checksum of the page data.
  uint32 crc32 = 3;

  // Number of rows in the page.
  uint32 rows_count = 4;

  // Compression type used for the page.
  CompressionType compression = 5;

  // Encoding type used for the page.
  EncodingType encoding = 6;

  // Byte offset from the start of the data object to the page's data.
  uint32 data_offset = 7;

  // Size of the page's data in bytes.
  uint32 data_size = 8;

  // Optional statistics for the page.
  Statistics statistics = 9;
}

// EncodingType holds various encoding types for data within a page.
enum EncodingType {
  // Invalid encoding type.
  ENCODING_TYPE_UNSPECIFIED = 0;

  // Plain encoding; data is stored as-is.
  ENCODING_TYPE_PLAIN = 1;

  // Delta encoding. The first value within the page is stored as-is, and
  // subsequent values are stored as the delta from the previous value.
  ENCODING_TYPE_DELTA = 2;
}
